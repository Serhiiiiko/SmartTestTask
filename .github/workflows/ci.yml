name: CI - Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  CONFIGURATION: Release

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          MSSQL_SA_PASSWORD: YourStrong!Passw0rd123
          MSSQL_PID: Developer
        ports:
          - 1433:1433
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourStrong!Passw0rd123 -Q 'SELECT 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore SmartTestTask.sln

    - name: Build
      run: dotnet build SmartTestTask.sln --configuration ${{ env.CONFIGURATION }} --no-restore

    - name: Run tests
      run: |
        dotnet test SmartTestTask.sln \
          --configuration ${{ env.CONFIGURATION }} \
          --no-build \
          --verbosity normal \
          --logger "trx;LogFileName=test-results.trx" \
          --logger "html;LogFileName=test-results.html" \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults
      env:
        ConnectionStrings__DefaultConnection: "Server=localhost;Database=SmartTestTaskDb_Test;User Id=sa;Password=YourStrong!Passw0rd123;TrustServerCertificate=True;MultipleActiveResultSets=true"
        ApiKey: "TEST_API_KEY_12345"

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: TestResults/

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      if: always()
      with:
        directory: ./TestResults
        fail_ci_if_error: false
        verbose: true

    - name: Create test report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: .NET Tests
        path: 'TestResults/*.trx'
        reporter: dotnet-trx

  code-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install dotnet-format
      run: dotnet tool install -g dotnet-format

    - name: Check code formatting
      run: dotnet format --verify-no-changes --verbosity diagnostic

    - name: Run .NET analyzers
      run: dotnet build SmartTestTask.sln /p:EnforceCodeStyleInBuild=true
