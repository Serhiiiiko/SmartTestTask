// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartTestTask.Infrastructure.Data;

#nullable disable

namespace SmartTestTask.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SmartTestTask.Domain.Entities.EquipmentPlacementContract", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EquipmentQuantity")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProcessEquipmentTypeCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductionFacilityCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ContractNumber")
                        .IsUnique();

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsActive");

                    b.HasIndex("ProcessEquipmentTypeCode");

                    b.HasIndex("ProductionFacilityCode");

                    b.ToTable("EquipmentPlacementContracts", (string)null);
                });

            modelBuilder.Entity("SmartTestTask.Domain.Entities.ProcessEquipmentType", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Area")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Code");

                    b.HasIndex("Name");

                    b.ToTable("ProcessEquipmentTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Code = "EQT-001",
                            Area = 25m,
                            Name = "Industrial Lathe"
                        },
                        new
                        {
                            Code = "EQT-002",
                            Area = 30m,
                            Name = "CNC Milling Machine"
                        },
                        new
                        {
                            Code = "EQT-003",
                            Area = 10m,
                            Name = "3D Printer"
                        },
                        new
                        {
                            Code = "EQT-004",
                            Area = 40m,
                            Name = "Assembly Robot"
                        },
                        new
                        {
                            Code = "EQT-005",
                            Area = 15m,
                            Name = "Quality Control Station"
                        },
                        new
                        {
                            Code = "EQT-006",
                            Area = 35m,
                            Name = "Packaging Machine"
                        },
                        new
                        {
                            Code = "EQT-007",
                            Area = 20m,
                            Name = "Welding Station"
                        },
                        new
                        {
                            Code = "EQT-008",
                            Area = 50m,
                            Name = "Paint Booth"
                        },
                        new
                        {
                            Code = "EQT-009",
                            Area = 18m,
                            Name = "Testing Equipment"
                        },
                        new
                        {
                            Code = "EQT-010",
                            Area = 60m,
                            Name = "Storage Rack System"
                        });
                });

            modelBuilder.Entity("SmartTestTask.Domain.Entities.ProductionFacility", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("StandardArea")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Code");

                    b.HasIndex("Name");

                    b.ToTable("ProductionFacilities", (string)null);

                    b.HasData(
                        new
                        {
                            Code = "FAC-001",
                            Name = "Main Production Facility",
                            StandardArea = 10000m
                        },
                        new
                        {
                            Code = "FAC-002",
                            Name = "Secondary Production Facility",
                            StandardArea = 7500m
                        },
                        new
                        {
                            Code = "FAC-003",
                            Name = "North Wing Facility",
                            StandardArea = 5000m
                        },
                        new
                        {
                            Code = "FAC-004",
                            Name = "South Wing Facility",
                            StandardArea = 5000m
                        },
                        new
                        {
                            Code = "FAC-005",
                            Name = "Research & Development Facility",
                            StandardArea = 3000m
                        });
                });

            modelBuilder.Entity("SmartTestTask.Domain.Entities.EquipmentPlacementContract", b =>
                {
                    b.HasOne("SmartTestTask.Domain.Entities.ProcessEquipmentType", "ProcessEquipmentType")
                        .WithMany("Contracts")
                        .HasForeignKey("ProcessEquipmentTypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartTestTask.Domain.Entities.ProductionFacility", "ProductionFacility")
                        .WithMany("Contracts")
                        .HasForeignKey("ProductionFacilityCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProcessEquipmentType");

                    b.Navigation("ProductionFacility");
                });

            modelBuilder.Entity("SmartTestTask.Domain.Entities.ProcessEquipmentType", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("SmartTestTask.Domain.Entities.ProductionFacility", b =>
                {
                    b.Navigation("Contracts");
                });
#pragma warning restore 612, 618
        }
    }
}
